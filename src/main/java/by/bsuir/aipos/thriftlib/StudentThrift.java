/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package by.bsuir.aipos.thriftlib;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StudentThrift implements org.apache.thrift.TBase<StudentThrift, StudentThrift._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StudentThrift");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MIDDLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("middleName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATE_OF_BIRTH_FIELD_DESC = new org.apache.thrift.protocol.TField("dateOfBirth", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField HOME_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("homeAddress", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STUDENT_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("studentGroup", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StudentThriftStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StudentThriftTupleSchemeFactory());
  }

  public long id; // required
  public String firstName; // required
  public String lastName; // required
  public String middleName; // required
  public String dateOfBirth; // required
  public String homeAddress; // required
  public StudentGroupThrift studentGroup; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FIRST_NAME((short)2, "firstName"),
    LAST_NAME((short)3, "lastName"),
    MIDDLE_NAME((short)4, "middleName"),
    DATE_OF_BIRTH((short)5, "dateOfBirth"),
    HOME_ADDRESS((short)6, "homeAddress"),
    STUDENT_GROUP((short)7, "studentGroup");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FIRST_NAME
          return FIRST_NAME;
        case 3: // LAST_NAME
          return LAST_NAME;
        case 4: // MIDDLE_NAME
          return MIDDLE_NAME;
        case 5: // DATE_OF_BIRTH
          return DATE_OF_BIRTH;
        case 6: // HOME_ADDRESS
          return HOME_ADDRESS;
        case 7: // STUDENT_GROUP
          return STUDENT_GROUP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("lastName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIDDLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("middleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_OF_BIRTH, new org.apache.thrift.meta_data.FieldMetaData("dateOfBirth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOME_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("homeAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STUDENT_GROUP, new org.apache.thrift.meta_data.FieldMetaData("studentGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StudentGroupThrift.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StudentThrift.class, metaDataMap);
  }

  public StudentThrift() {
  }

  public StudentThrift(
    long id,
    String firstName,
    String lastName,
    String middleName,
    String dateOfBirth,
    String homeAddress,
    StudentGroupThrift studentGroup)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.firstName = firstName;
    this.lastName = lastName;
    this.middleName = middleName;
    this.dateOfBirth = dateOfBirth;
    this.homeAddress = homeAddress;
    this.studentGroup = studentGroup;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StudentThrift(StudentThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetLastName()) {
      this.lastName = other.lastName;
    }
    if (other.isSetMiddleName()) {
      this.middleName = other.middleName;
    }
    if (other.isSetDateOfBirth()) {
      this.dateOfBirth = other.dateOfBirth;
    }
    if (other.isSetHomeAddress()) {
      this.homeAddress = other.homeAddress;
    }
    if (other.isSetStudentGroup()) {
      this.studentGroup = new StudentGroupThrift(other.studentGroup);
    }
  }

  public StudentThrift deepCopy() {
    return new StudentThrift(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.firstName = null;
    this.lastName = null;
    this.middleName = null;
    this.dateOfBirth = null;
    this.homeAddress = null;
    this.studentGroup = null;
  }

  public long getId() {
    return this.id;
  }

  public StudentThrift setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getFirstName() {
    return this.firstName;
  }

  public StudentThrift setFirstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  public String getLastName() {
    return this.lastName;
  }

  public StudentThrift setLastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  public void unsetLastName() {
    this.lastName = null;
  }

  /** Returns true if field lastName is set (has been assigned a value) and false otherwise */
  public boolean isSetLastName() {
    return this.lastName != null;
  }

  public void setLastNameIsSet(boolean value) {
    if (!value) {
      this.lastName = null;
    }
  }

  public String getMiddleName() {
    return this.middleName;
  }

  public StudentThrift setMiddleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  public void unsetMiddleName() {
    this.middleName = null;
  }

  /** Returns true if field middleName is set (has been assigned a value) and false otherwise */
  public boolean isSetMiddleName() {
    return this.middleName != null;
  }

  public void setMiddleNameIsSet(boolean value) {
    if (!value) {
      this.middleName = null;
    }
  }

  public String getDateOfBirth() {
    return this.dateOfBirth;
  }

  public StudentThrift setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  public void unsetDateOfBirth() {
    this.dateOfBirth = null;
  }

  /** Returns true if field dateOfBirth is set (has been assigned a value) and false otherwise */
  public boolean isSetDateOfBirth() {
    return this.dateOfBirth != null;
  }

  public void setDateOfBirthIsSet(boolean value) {
    if (!value) {
      this.dateOfBirth = null;
    }
  }

  public String getHomeAddress() {
    return this.homeAddress;
  }

  public StudentThrift setHomeAddress(String homeAddress) {
    this.homeAddress = homeAddress;
    return this;
  }

  public void unsetHomeAddress() {
    this.homeAddress = null;
  }

  /** Returns true if field homeAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeAddress() {
    return this.homeAddress != null;
  }

  public void setHomeAddressIsSet(boolean value) {
    if (!value) {
      this.homeAddress = null;
    }
  }

  public StudentGroupThrift getStudentGroup() {
    return this.studentGroup;
  }

  public StudentThrift setStudentGroup(StudentGroupThrift studentGroup) {
    this.studentGroup = studentGroup;
    return this;
  }

  public void unsetStudentGroup() {
    this.studentGroup = null;
  }

  /** Returns true if field studentGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetStudentGroup() {
    return this.studentGroup != null;
  }

  public void setStudentGroupIsSet(boolean value) {
    if (!value) {
      this.studentGroup = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((String)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLastName();
      } else {
        setLastName((String)value);
      }
      break;

    case MIDDLE_NAME:
      if (value == null) {
        unsetMiddleName();
      } else {
        setMiddleName((String)value);
      }
      break;

    case DATE_OF_BIRTH:
      if (value == null) {
        unsetDateOfBirth();
      } else {
        setDateOfBirth((String)value);
      }
      break;

    case HOME_ADDRESS:
      if (value == null) {
        unsetHomeAddress();
      } else {
        setHomeAddress((String)value);
      }
      break;

    case STUDENT_GROUP:
      if (value == null) {
        unsetStudentGroup();
      } else {
        setStudentGroup((StudentGroupThrift)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case FIRST_NAME:
      return getFirstName();

    case LAST_NAME:
      return getLastName();

    case MIDDLE_NAME:
      return getMiddleName();

    case DATE_OF_BIRTH:
      return getDateOfBirth();

    case HOME_ADDRESS:
      return getHomeAddress();

    case STUDENT_GROUP:
      return getStudentGroup();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FIRST_NAME:
      return isSetFirstName();
    case LAST_NAME:
      return isSetLastName();
    case MIDDLE_NAME:
      return isSetMiddleName();
    case DATE_OF_BIRTH:
      return isSetDateOfBirth();
    case HOME_ADDRESS:
      return isSetHomeAddress();
    case STUDENT_GROUP:
      return isSetStudentGroup();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StudentThrift)
      return this.equals((StudentThrift)that);
    return false;
  }

  public boolean equals(StudentThrift that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_firstName = true && this.isSetFirstName();
    boolean that_present_firstName = true && that.isSetFirstName();
    if (this_present_firstName || that_present_firstName) {
      if (!(this_present_firstName && that_present_firstName))
        return false;
      if (!this.firstName.equals(that.firstName))
        return false;
    }

    boolean this_present_lastName = true && this.isSetLastName();
    boolean that_present_lastName = true && that.isSetLastName();
    if (this_present_lastName || that_present_lastName) {
      if (!(this_present_lastName && that_present_lastName))
        return false;
      if (!this.lastName.equals(that.lastName))
        return false;
    }

    boolean this_present_middleName = true && this.isSetMiddleName();
    boolean that_present_middleName = true && that.isSetMiddleName();
    if (this_present_middleName || that_present_middleName) {
      if (!(this_present_middleName && that_present_middleName))
        return false;
      if (!this.middleName.equals(that.middleName))
        return false;
    }

    boolean this_present_dateOfBirth = true && this.isSetDateOfBirth();
    boolean that_present_dateOfBirth = true && that.isSetDateOfBirth();
    if (this_present_dateOfBirth || that_present_dateOfBirth) {
      if (!(this_present_dateOfBirth && that_present_dateOfBirth))
        return false;
      if (!this.dateOfBirth.equals(that.dateOfBirth))
        return false;
    }

    boolean this_present_homeAddress = true && this.isSetHomeAddress();
    boolean that_present_homeAddress = true && that.isSetHomeAddress();
    if (this_present_homeAddress || that_present_homeAddress) {
      if (!(this_present_homeAddress && that_present_homeAddress))
        return false;
      if (!this.homeAddress.equals(that.homeAddress))
        return false;
    }

    boolean this_present_studentGroup = true && this.isSetStudentGroup();
    boolean that_present_studentGroup = true && that.isSetStudentGroup();
    if (this_present_studentGroup || that_present_studentGroup) {
      if (!(this_present_studentGroup && that_present_studentGroup))
        return false;
      if (!this.studentGroup.equals(that.studentGroup))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StudentThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StudentThrift typedOther = (StudentThrift)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstName()).compareTo(typedOther.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, typedOther.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastName()).compareTo(typedOther.isSetLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastName, typedOther.lastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMiddleName()).compareTo(typedOther.isSetMiddleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMiddleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.middleName, typedOther.middleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateOfBirth()).compareTo(typedOther.isSetDateOfBirth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateOfBirth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateOfBirth, typedOther.dateOfBirth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeAddress()).compareTo(typedOther.isSetHomeAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeAddress, typedOther.homeAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudentGroup()).compareTo(typedOther.isSetStudentGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudentGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentGroup, typedOther.studentGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StudentThrift(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstName:");
    if (this.firstName == null) {
      sb.append("null");
    } else {
      sb.append(this.firstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastName:");
    if (this.lastName == null) {
      sb.append("null");
    } else {
      sb.append(this.lastName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("middleName:");
    if (this.middleName == null) {
      sb.append("null");
    } else {
      sb.append(this.middleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateOfBirth:");
    if (this.dateOfBirth == null) {
      sb.append("null");
    } else {
      sb.append(this.dateOfBirth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("homeAddress:");
    if (this.homeAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.homeAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("studentGroup:");
    if (this.studentGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.studentGroup);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (studentGroup != null) {
      studentGroup.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StudentThriftStandardSchemeFactory implements SchemeFactory {
    public StudentThriftStandardScheme getScheme() {
      return new StudentThriftStandardScheme();
    }
  }

  private static class StudentThriftStandardScheme extends StandardScheme<StudentThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StudentThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstName = iprot.readString();
              struct.setFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastName = iprot.readString();
              struct.setLastNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIDDLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.middleName = iprot.readString();
              struct.setMiddleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATE_OF_BIRTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateOfBirth = iprot.readString();
              struct.setDateOfBirthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOME_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.homeAddress = iprot.readString();
              struct.setHomeAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STUDENT_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.studentGroup = new StudentGroupThrift();
              struct.studentGroup.read(iprot);
              struct.setStudentGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StudentThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.firstName != null) {
        oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.firstName);
        oprot.writeFieldEnd();
      }
      if (struct.lastName != null) {
        oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
        oprot.writeString(struct.lastName);
        oprot.writeFieldEnd();
      }
      if (struct.middleName != null) {
        oprot.writeFieldBegin(MIDDLE_NAME_FIELD_DESC);
        oprot.writeString(struct.middleName);
        oprot.writeFieldEnd();
      }
      if (struct.dateOfBirth != null) {
        oprot.writeFieldBegin(DATE_OF_BIRTH_FIELD_DESC);
        oprot.writeString(struct.dateOfBirth);
        oprot.writeFieldEnd();
      }
      if (struct.homeAddress != null) {
        oprot.writeFieldBegin(HOME_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.homeAddress);
        oprot.writeFieldEnd();
      }
      if (struct.studentGroup != null) {
        oprot.writeFieldBegin(STUDENT_GROUP_FIELD_DESC);
        struct.studentGroup.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StudentThriftTupleSchemeFactory implements SchemeFactory {
    public StudentThriftTupleScheme getScheme() {
      return new StudentThriftTupleScheme();
    }
  }

  private static class StudentThriftTupleScheme extends TupleScheme<StudentThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StudentThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetFirstName()) {
        optionals.set(1);
      }
      if (struct.isSetLastName()) {
        optionals.set(2);
      }
      if (struct.isSetMiddleName()) {
        optionals.set(3);
      }
      if (struct.isSetDateOfBirth()) {
        optionals.set(4);
      }
      if (struct.isSetHomeAddress()) {
        optionals.set(5);
      }
      if (struct.isSetStudentGroup()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetFirstName()) {
        oprot.writeString(struct.firstName);
      }
      if (struct.isSetLastName()) {
        oprot.writeString(struct.lastName);
      }
      if (struct.isSetMiddleName()) {
        oprot.writeString(struct.middleName);
      }
      if (struct.isSetDateOfBirth()) {
        oprot.writeString(struct.dateOfBirth);
      }
      if (struct.isSetHomeAddress()) {
        oprot.writeString(struct.homeAddress);
      }
      if (struct.isSetStudentGroup()) {
        struct.studentGroup.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StudentThrift struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.firstName = iprot.readString();
        struct.setFirstNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastName = iprot.readString();
        struct.setLastNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.middleName = iprot.readString();
        struct.setMiddleNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dateOfBirth = iprot.readString();
        struct.setDateOfBirthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.homeAddress = iprot.readString();
        struct.setHomeAddressIsSet(true);
      }
      if (incoming.get(6)) {
        struct.studentGroup = new StudentGroupThrift();
        struct.studentGroup.read(iprot);
        struct.setStudentGroupIsSet(true);
      }
    }
  }

}

